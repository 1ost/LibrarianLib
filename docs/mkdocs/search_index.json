{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the LibrarianLib documentation!\n\n\nLibrarianLib is your one-stop library. It doesn't supply many specific, user facing features, but what it does do is take nearly all the pain out of modding.\n\n\nIt will:\n\n\n\n\nRegister your blocks, items, and models for you (including automatically generating common and complex models)\n\n\nAutomatically serialize and sync your tile entities\n\n\nAllow your tile entities to provide a capability simply by annotating a field\n\n\nMake config files with nothing but a class and some annotations\n\n\nHandle reading and writing your packets\n\n\nMake GUIs fun again\n\n\nMake GUI containers not as painful (and allow slots to disappear and/or move in a GUI)\n\n\nMake the gods of Java access modifiers bend to your will (native-speed reflection access. Screw private fields and hacky access transformers!)\n\n\nMake creating gorgeous particle effects easy and fun\n\n\nProvide tons of Kotlin extension functions for everything under the sun, including vector math operators!\n\n\n\n\nIt also has a huge number of small utility classes for:\n\n\n\n\nGetting information on client ticks and partial ticks: \nClientTickHandler\n\n\nTell you what modid owns a class: \nOwnershipHandler\n\n\nCreating custom registries: \nRegistryMod\n\n\nCustom event buses: \nEventBus\n/\nEvent\n/\nEventCancelable\n\n\nCustom forge events for resource pack reloads and for rendering custom \"things\" in the world: \nResourceReloadEvent\n/\nCustomWorldRenderEvent\n\n\nSafely accessing item NBT: \nItemNBTHelper\n\n\nBuilding NBT and JSON objects with a builder pattern in Kotlin: \nNBTMaker.kt\n/\nJsonMaker.kt\n\n\nDoing 2d vector math, 2d bounding box math, and 3d transforms: \nVec2d\n/\nBoundingBox2D\n/\nMatrix4\n\n\nRepresenting curves and other data as a 0-1 time step interpolation functions: \nInterpFunction\n\n\nCreating multi block render layer JSON models with the vanilla format. Layers are specified per-face. \nLibLibModelBlock\n\n\nSending non-spamming messages to the player\n\n\nWIP\n Making shaders not terrible \nCrashes on some machines\n: \nShaderHelper\n\n\nDrawing sections of textures without the need for \nmagic numbers\n in the code, and for animating arbitrary sprites: \nSprite\n/\nDrawingUtil\n\n\nWIP\n Matching structure files against the world for multiblocks and to allow rendering structure files in a GUI: \nStructure\n/\nInWorldRender\n/\nStructureRenderUtil\n\n\nRendering BlockStates to a vertex buffer: \nBlockRenderUtils\n\n\nRegistering custom sprites to the block texture map: \nCustomBlockMapSprites\n\n\nAdding custom F3+key actions: \nF3Handler\n\n\nUsing an OpenGL scissor test: \nScissorUtil\n\n\nMaking item tooltips easier in general: \nTooltipHelper\n\n\nMaking scanning through an ASMDataTable for annotations easier: \nAnnotationHelper\n\n\nRunning code only on the client: \nClientRunnable\n\n\nStoring a BlockPos and a dimension together: \nDimWithPos\n\n\nPairs of EnumFacings: \nEnumBiFacing\n\n\nGenerating blockstate and model JSONs: \nJsonGenerationUtils\n\n\nBasic logging: \nLoggerBase\n\n\nProfiling code performance: \nProfiler\n\n\nRaycasting blocks: \nRaycastUtils\n\n\nUsing Java's Unsafe class: \nUnsafeKt\n\n\n\n\nMain Features\n\n\n\n\nDocs WIP\n Automatic registration of blocks, tile entities, items, enchantments, potions, achievements, packets, capabilities, and more in the future!\n\n\nDocs WIP\n Base block classes for automatic block model registration and generation! This includes base block classes that automatically generate models for over a dozen common block types, such as doors, slabs, stairs, and fences!\n\n\n\n\nDocs WIP\n Base item classes for automatic item model registration and generation! This includes base item classes for tools, food, armor, swords, and arrows!\n\n\n\n\n\n\nDocs WIP\n\n\n\n\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-the-librarianlib-documentation", 
            "text": "LibrarianLib is your one-stop library. It doesn't supply many specific, user facing features, but what it does do is take nearly all the pain out of modding.  It will:   Register your blocks, items, and models for you (including automatically generating common and complex models)  Automatically serialize and sync your tile entities  Allow your tile entities to provide a capability simply by annotating a field  Make config files with nothing but a class and some annotations  Handle reading and writing your packets  Make GUIs fun again  Make GUI containers not as painful (and allow slots to disappear and/or move in a GUI)  Make the gods of Java access modifiers bend to your will (native-speed reflection access. Screw private fields and hacky access transformers!)  Make creating gorgeous particle effects easy and fun  Provide tons of Kotlin extension functions for everything under the sun, including vector math operators!   It also has a huge number of small utility classes for:   Getting information on client ticks and partial ticks:  ClientTickHandler  Tell you what modid owns a class:  OwnershipHandler  Creating custom registries:  RegistryMod  Custom event buses:  EventBus / Event / EventCancelable  Custom forge events for resource pack reloads and for rendering custom \"things\" in the world:  ResourceReloadEvent / CustomWorldRenderEvent  Safely accessing item NBT:  ItemNBTHelper  Building NBT and JSON objects with a builder pattern in Kotlin:  NBTMaker.kt / JsonMaker.kt  Doing 2d vector math, 2d bounding box math, and 3d transforms:  Vec2d / BoundingBox2D / Matrix4  Representing curves and other data as a 0-1 time step interpolation functions:  InterpFunction  Creating multi block render layer JSON models with the vanilla format. Layers are specified per-face.  LibLibModelBlock  Sending non-spamming messages to the player  WIP  Making shaders not terrible  Crashes on some machines :  ShaderHelper  Drawing sections of textures without the need for  magic numbers  in the code, and for animating arbitrary sprites:  Sprite / DrawingUtil  WIP  Matching structure files against the world for multiblocks and to allow rendering structure files in a GUI:  Structure / InWorldRender / StructureRenderUtil  Rendering BlockStates to a vertex buffer:  BlockRenderUtils  Registering custom sprites to the block texture map:  CustomBlockMapSprites  Adding custom F3+key actions:  F3Handler  Using an OpenGL scissor test:  ScissorUtil  Making item tooltips easier in general:  TooltipHelper  Making scanning through an ASMDataTable for annotations easier:  AnnotationHelper  Running code only on the client:  ClientRunnable  Storing a BlockPos and a dimension together:  DimWithPos  Pairs of EnumFacings:  EnumBiFacing  Generating blockstate and model JSONs:  JsonGenerationUtils  Basic logging:  LoggerBase  Profiling code performance:  Profiler  Raycasting blocks:  RaycastUtils  Using Java's Unsafe class:  UnsafeKt", 
            "title": "Welcome to the LibrarianLib documentation!"
        }, 
        {
            "location": "/#main-features", 
            "text": "Docs WIP  Automatic registration of blocks, tile entities, items, enchantments, potions, achievements, packets, capabilities, and more in the future!  Docs WIP  Base block classes for automatic block model registration and generation! This includes base block classes that automatically generate models for over a dozen common block types, such as doors, slabs, stairs, and fences!   Docs WIP  Base item classes for automatic item model registration and generation! This includes base item classes for tools, food, armor, swords, and arrows!    Docs WIP", 
            "title": "Main Features"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }
    ]
}