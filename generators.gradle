def resourceRoots = project.sourceSets.main.resources.sourceDirectories
def testResourceRoots = project.sourceSets.test.resources.sourceDirectories
def generatedDir = "$buildDir/generated"

def projectDependencies() {
    project.compileJava.taskDependencies.getDependencies().collect { it.project }.unique()
}

def tomlDependency(String modid, String dependencyid, String version) {
    return """\
        [[dependencies.$modid]]
            modId="$dependencyid"
            versionRange="$version"
            mandatory=true
    """.stripIndent()

}

def skeletonModInfo(File output, FileCollection resourceRoots, String modid, String human_name, String description, String additionalDependencies) {
    def tomlString = """\
            modLoader="kotlinfml"
            loaderVersion="[1,)"
            [[mods]]
            modId="$modid"
            version="${rootProject.mod_version}"
            displayName="LibrarianLib $human_name"
            description="$description"
            ${tomlDependency(modid, "librarianlib", "[${rootProject.mod_version}]")}
        """.stripIndent()
    tomlString += additionalDependencies

    // add module dependencies, so missing modules will produce meaningful errors
    projectDependencies().each { dep ->
        if(dep == project || dep.path == ":core")
            return
        tomlString += tomlDependency(modid, "$dep.modid", "[${rootProject.mod_version}]")
    }

    resourceRoots.collect { file(it.path + "/META-INF/dependencies.toml") }.findAll { it.exists() }.each {
        def dep = it.text.replaceAll("MOD_ID", modid)
        if(!dep.endsWith("\n"))
            dep += "\n"
        tomlString += dep
    }

    def packMcMeta = """\
                {
                    "pack": {
                        "description": "LibrarianLib $human_name resources",
                        "pack_format": 4
                    }
                }
            """.stripIndent()

    file(output.path + '/META-INF').mkdirs()
    file(output.path + '/META-INF/mods.toml').text = tomlString
    file(output.path + '/pack.mcmeta').text = packMcMeta
}

if(path != ":core") {
    task generateSkeletonModInfo << {
        skeletonModInfo(sourceSets.main.output.resourcesDir, resourceRoots,
                project.modid, project.human_name, project.module_description,
                ""
        )
    }

    processResources.finalizedBy(generateSkeletonModInfo)
}

task generateTestModInfo << {
    def additionalDependencies = ""
    if(project.path != ":core")
        additionalDependencies += tomlDependency(project.modid_test, project.modid, "[${rootProject.mod_version}]")
    if(project.path != ":testbase" && project.path != ":core")
        additionalDependencies += tomlDependency(project.modid_test, project(":testbase").modid, "[${rootProject.mod_version}]")

    skeletonModInfo(sourceSets.test.output.resourcesDir, testResourceRoots,
            project.modid_test, project.human_name + " Test", "The $project.human_name test mod",
            additionalDependencies
    )
}

processTestResources.finalizedBy(generateTestModInfo)

def generateMixinContainer(File output, FileCollection resourceRoots) {
    output.mkdirs()
    def resourceOutput = sourceSets.main.output.resourcesDir

    def configs = []

    resourceRoots.collect { file(it.path + "/META-INF/mixins.txt") }.findAll { it.exists() }.each {
        configs += it.readLines()
    }

    if(configs.size() == 0) {
        file(output.path + '/SkeletonMixinConnector.java').delete()
        file(output.path + "/META-INF/MANIFEST.MF").delete()
    } else {
        def connectorString = """\
            import org.spongepowered.asm.mixin.Mixins;
            import org.spongepowered.asm.mixin.connect.IMixinConnector;

            public class SkeletonMixinConnector implements IMixinConnector {
                @Override
                public void connect() {
                    ${
            configs.collect {
                "Mixins.addConfiguration(\"$it\");"
            }.join("\n        ")
        }
                }
            }
        """.stripIndent()

        file(output.path + '/SkeletonMixinConnector.java').text = connectorString

        file(resourceOutput.path + "/META-INF").mkdirs()
        file(resourceOutput.path + "/META-INF/MANIFEST.MF").text =
                resourceRoots.collect { file(it.path + "/META-INF/MANIFEST.MF") }.findAll { it.exists() }.collect {
                    it.text
                }.join("\n") + "MixinConnector: SkeletonMixinConnector\n"
    }

}
task generateSkeletonMixinConnector << {
    generateMixinContainer(file("$generatedDir/main/java"), resourceRoots)
}

task generateTestSkeletonMixinConnector << {
    generateMixinContainer(file("$generatedDir/test/java"), testResourceRoots)
}

compileKotlin.source = files(compileKotlin.source) {
    from("$buildDir/generated/main/kotlin")
}
compileJava.source = files(compileJava.source) {
    from("$buildDir/generated/main/java")
}
generateSkeletonMixinConnector.dependsOn(processResources)
compileJava.dependsOn(generateSkeletonMixinConnector)
compileKotlin.dependsOn(generateSkeletonMixinConnector)

compileTestKotlin.source = files(compileTestKotlin.source) {
    from("$buildDir/generated/main/kotlin")
}
compileTestJava.source = files(compileTestJava.source) {
    from("$buildDir/generated/test/java")
}
generateTestSkeletonMixinConnector.dependsOn(processTestResources)
compileTestJava.dependsOn(generateTestSkeletonMixinConnector)
compileTestKotlin.dependsOn(generateTestSkeletonMixinConnector)
