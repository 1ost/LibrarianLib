buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
    }
}

allprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'kotlin'

    ext.allmodules = rootProject.subprojects.findAll { it.path != ":runtime" }

    version = '1.0'
    group = mod_group
    archivesBaseName = mod_id + (project == rootProject ? "" : "-${project.name}")

    sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

    repositories {
        jcenter()
        maven { url = "http://maven.shadowfacts.net/" }
        maven { url = "https://jitpack.io" }
        maven { url = "https://minecraft.curseforge.com/api/maven/" }
    }

    minecraft {
        mappings channel: mc_mappings_channel, version: mc_mappings_version
    }

    configurations {
        shade
        api.extendsFrom(libApi)
        implementation.extendsFrom(libImplementation)
        testImplementation.extendsFrom(libTestImplementation)
        libRuntime.extendsFrom(libApi, libImplementation, libTestImplementation)
    }

    dependencies {
        minecraft "net.minecraftforge:forge:$mc_version-$forge_version"
        implementation "kottle:Kottle:$kottle_version"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs += [
                "-Xjvm-default=enable",
                "-Xuse-experimental=kotlin.Experimental"
            ]
        }
    }
}

configure(allmodules) {
    if(path != ":core") {

        task generateSkeletonModInfo << {
            def output = sourceSets.main.output.resourcesDir

            def tomlString = """
                modLoader="kotlinfml"
                loaderVersion="[1,)"
                [[mods]]
                modId="librarianlib-$project.name"
                version="0"
                displayName="LibrarianLib $humanName"
                description="The LibrarianLib $humanName module"
                [[dependencies.librarianlib-$project.name]]
                    modId="librarianlib"
                    mandatory=true
            """.stripIndent()

            def packMcMeta = """
                {
                    "pack": {
                        "description": "LibrarianLib $humanName resources",
                        "pack_format": 4
                    }
                }
            """.stripIndent()

            file(output.path + '/META-INF').mkdirs()
            file(output.path + '/META-INF/mods.toml').text = tomlString
            file(output.path + '/pack.mcmeta').text = packMcMeta
        }

        processResources.finalizedBy(generateSkeletonModInfo)
    }

    task generateTestModInfo << {
        def output = sourceSets.test.output.resourcesDir

        def tomlString = """
            modLoader="kotlinfml"
            loaderVersion="[1,)"
            [[mods]]
            modId="librarianlib-$project.name-test"
            version="0"
            displayName="LibrarianLib $humanName Test"
            description="The LibrarianLib $humanName test mod"
            [[dependencies.librarianlib-$project.name-test]]
                modId="librarianlib"
                mandatory=true
        """.stripIndent()

        def packMcMeta = """
            {
                "pack": {
                    "description": "LibrarianLib $humanName test resources",
                    "pack_format": 4
                }
            }
        """.stripIndent()

        file(output.path + '/META-INF').mkdirs()
        file(output.path + '/META-INF/mods.toml').text = tomlString
        file(output.path + '/pack.mcmeta').text = packMcMeta
    }

    processTestResources.finalizedBy(generateTestModInfo)
}

configurations {
    implementation.extendsFrom libModule
}

dependencies {
    allmodules.each {
        implementation(it)
        shade(project(path: it.path, configuration: "shade"))
    }
}

allmodules.each {
    classes.dependsOn(it.classes)
    processResources.dependsOn(it.processResources)
    jar.dependsOn(it.jar)
}

minecraft {
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

task collectCoreMods << {
    def resourceRoots = files([])
    allmodules.each { [it.sourceSets.main, it.sourceSets.test].each {
        resourceRoots.from(it.resources.sourceDirectories)
    } }

    def output = sourceSets.main.output.resourcesDir

    def coremods = resourceRoots.collect { file(it.path + "/META-INF/coremods.json") }.findAll { it.exists() }

    // collect coremods
    file(output.path + '/META-INF').mkdirs()
    file(output.path + '/META-INF/coremods.json').text =
            "{\n" + coremods.collect {
                it.text
                        .replaceAll("[{}]", "") // replace enclosing brackets with blank lines
                        .replaceAll("\\s+\$", "") // remove trailing whitespace
                        .split("\n").findAll { !it.matches("^\\s*\$") } // remove blank lines
                        .join("\n") // re-join lines
            }.join(",\n") + "\n}"
}

processResources.finalizedBy(collectCoreMods)

jar {
    configurations.shade.each { dep ->
        from(zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    allmodules.each { mod ->
        if(mod.path == ":testbase") return
        from(mod.sourceSets.main.output.classesDirs) {
            exclude '**/LibModuleSkeleton.class'
        }
        from(mod.sourceSets.main.output.resourcesDir) {
            if(mod.path == ":core") {
                filesMatching('META-INF/modules/index.txt') {
                    filter { line ->
                        if (line == "testbase")
                            return null
                        return line
                    }
                }
            } else {
                exclude 'META-INF/coremods.json'
                exclude 'META-INF/mods.toml'
            }
        }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
//jar {
//    manifest {
//        attributes([
//                "Specification-Title": "examplemod",
//                "Specification-Vendor": "examplemodsareus",
//                "Specification-Version": "1", // We are version 1 of ourselves
//                "Implementation-Title": project.name,
//                "Implementation-Version": "${version}",
//                "Implementation-Vendor" :"examplemodsareus",
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
