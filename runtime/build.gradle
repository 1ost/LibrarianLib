apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.spongepowered.mixin'

configurations {
    mod
}

minecraft {
    mappings channel: mc_mappings_channel, version: mc_mappings_version
}

//sourceSets {
//    main {
//        ext.refMap = "${project.name}.refmap.json"
//    }
//    test {
//        ext.refMap = "${project.name}-test.refmap.json"
//    }
//}
//
//mixin {
//}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"
//    implementation "org.spongepowered:mixin:0.8-SNAPSHOT"
    mod "mixinbootstrap:MixinBootstrap:1.0.2"
    allmodules.each {
        mod project(path: it.path, configuration: "mod")
    }
}

// we need all the modules to compile first
allmodules.each {
    classes.dependsOn(it.classes)
    processResources.dependsOn(it.processResources)
    classes.dependsOn(it.testClasses)
    processResources.dependsOn(it.processTestResources)
}

// Create empty directories for all of the build outputs.
// ForgeGradle gives all the output directories to forge to search, but when the directories don't exist forge spews
// dozens of errors about missing directories when searching for mods:
//   [18:17:04] [pool-2-thread-1/ERROR] [ne.mi.fm.lo.mo.ExplodedDirectoryLocator/SCAN]: Exception scanning <<project dir>>/modules/utilities/build/classes/java/test
//   java.nio.file.NoSuchFileException: <<project dir>>/modules/utilities/build/classes/java/test
//       at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) ~[?:1.8.0_181] {}
task(createEmptyMainOutputDirs).doLast {
    allmodules.each { module ->
        module.sourceSets.main.output.each {
            it.mkdirs()
        }
    }
}
task(createEmptyTestOutputDirs).doLast {
    allmodules.each { module ->
        module.sourceSets.test.output.each {
            it.mkdirs()
        }
    }
}
processResources.finalizedBy(createEmptyMainOutputDirs)
processTestResources.finalizedBy(createEmptyTestOutputDirs)

task copyLibModJars(type: Sync) {
    into project.file('run/mods')
    from project.file('mods')
    from configurations.mod
}
compileJava.dependsOn(copyLibModJars)

minecraft {
    Closure runDefaults = {
        workingDirectory project.file('run')
        // ForgeGradle would generate `runtime_main`, which is wrong on two counts. Firstly it needs to be `.main` and
        // not `_main` (which is a _known issue_ https://github.com/MinecraftForge/ForgeGradle/issues/425), and secondly
        // it doesn't take into account the fact that this project may not be the root project.
        // https://github.com/MinecraftForge/ForgeGradle/blob/bd92a0d384b987be361ed3f7df28b1980f7fae1e/src/common/java/net/minecraftforge/gradle/common/util/RunConfig.java#L240
        ideaModule 'librarianlib.runtime.main'
        singleInstance true
        taskName name

        property 'forge.logging.markers', 'REGISTRIES'
        property 'forge.logging.console.level', 'debug'

        mods {
            allmodules.each { mod ->
                create(mod.modid) {
                    sources mod.sourceSets.main
                }
                create(mod.modid_test) {
                    source mod.sourceSets.test
                }
            }
        }
    }

    runs {
        client {
            configure(delegate, runDefaults)
        }

        server {
            configure(delegate, runDefaults)
        }
    }
}
