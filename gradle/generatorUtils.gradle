class GeneratorUtils {
    String generateMixinConnector(String packageName, String className, FileCollection mixinFiles) {
        def mixinRegex = ~'META-INF/ll/(\\w+)/mixins/([\\w.]+)$'
        def mixinConfigs = mixinFiles.collect {
            def matcher = it.path =~ mixinRegex
            if(!matcher.find(0))
                throw new IllegalStateException("illegal mixin file path `${it.name}`")
            return matcher.group()
        }
        return """\
           |package $packageName;
           |
           |import org.spongepowered.asm.mixin.Mixins;
           |import org.spongepowered.asm.mixin.connect.IMixinConnector;
           |
           |public class $className implements IMixinConnector {
           |    @Override
           |    public void connect() {
           |        ${mixinConfigs.collect { "Mixins.addConfiguration(\"$it\");" }.join("\n|        ")}
           |    }
           |}
        |""".stripMargin()
    }

    String generateCoremodsJson(FileCollection coremodFiles) {
        def coremodRegex = ~'META-INF/ll/(\\w+)/asm/([\\w.]+).js$'
        def coremods = coremodFiles.collectEntries {
            def matcher = it.path =~ coremodRegex
            if(!matcher.find(0))
                throw new IllegalStateException("illegal coremod file path `${it.name}`")
            ["ll.${matcher.group(1)}.${matcher.group(2)}", matcher.group()]
        }
        return "{\n" + coremods.collect { name, path ->
            "    \"$name\": \"$path\""
        }.join(",\n") + "\n}"
    }
}

project.ext.GeneratorUtils = new GeneratorUtils()
